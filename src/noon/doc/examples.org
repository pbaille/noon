#+title: Examples

* Noon examples

#+begin_src clojure
(ns noon.doc.examples
  (:use noon.score)
  (:require [noon.lib.harmony :as h]
            [noon.lib.melody :as m]
            [noon.lib.rythmn :as r]
            [noon.utils.misc :as u]
            [noon.midi :as midi]
            [clojure.math.combinatorics :as comb]))
#+end_src

Let's use the chorium soundfont:

#+begin_src clojure :pp
(swap! options* assoc :tracks {0 :chorium})
#+end_src

#+RESULTS:
#+begin_src clojure
{:bpm 60, :tracks {0 :chorium}}

#+end_src

** simple I IV I V

#+begin_src clojure :pp
(play dur2
      ;; grid
      (cat I IV I V)
      (h/align-contexts :s)
      ;; on each chord
      ($ (chans
          ;; rythmn
          [(patch :woodblock) C0 (dupt 4)]
          [(patch :tinkle-bell) C0 (r/gen-tup 12 5 {:durations [1 2 3]})]
          ;; comping
          [(patch :marimba) o1- (r/gen-tup 12 5 :euclidean) ($ (par s0 s2)) ($ (one-of s0 s1 s1-))]
          [(patch :acoustic-bass) t2- vel10 (r/gen-tup 12 5 :euclidean :shifted)]
          ;; ornementation
          [vel12 (patch :music-box) o1
           (one-of s0 s1 s1-)
           (shuftup s0 s1 s3)
           ($ (probs {[(par s0 s2) (maybe (tup s0 s1))] 3
                      [(tup s3 s1 (par s2 s0) s1-)] 2
                      [(tup d1- s0 d1 s0) (maybe (m/rotation 2))] 1}))]))
      ;; repeat one time
      (dup 2))
#+end_src

#+RESULTS:
#+begin_src clojure
{:source-file "generated/history/1721641684099.noon",
 :seed-file "generated/history/1721641684099.seed",
 :midi-file "generated/history/1721641684099.mid"}

#+end_src

** simple I IV VII I

Experimenting passing notes:

#+begin_src clojure :pp
(play dur2
      (scale :harmonic-minor)
      (cat I IV VII I)
      (h/align-contexts :s)

      (cat same (transpose c3) same)

      (chans

       [(patch :choir-aahs) vel4
        ($ [(par s0 s1 s2)
            (maybe (tup s0 s1-) (tup s0 s1))])]

       [(patch :ocarina) vel6
        ($ [(shuftup s0 s1 s2)
            ($ (one-of (tup s0 (shufcat (one-of c1- s-) s+) s0)
                       (tup s0 c1- s0 (one-of s2- s2))))])]

       [(patch :kalimba) vel4 o2
        ($ [(shuftup s0 s1 s2)
            ($ (one-of vel0 (par s0 s2-) (shuftup s0 s1 s2)))])]

       [(patch :acoustic-bass) vel3
        o2-]))
#+end_src

** Giant steps (John Coltrane)

An experiment using Giant steps harmony.

#+begin_src clojure :pp

(def GIANT_STEPS
  (let [II [II {:degree :II}]
        V [V {:degree :V}]
        I [I {:degree :I}]
        t1 same
        t2 (transpose c4-)
        t3 (transpose c4)
        s1 (cat [t1 I] [t2 (cat V I)] [t3 (cat V [dur2 I])] [t2 (cat II V)])
        II-V-I (cat II V [I dur2])]
    [tetrad
     (tup s1
          [t2 s1]
          [t3 I dur2] [t2 II-V-I] II-V-I [t3 II-V-I] [t1 (cat II V)])
     (h/align-contexts :structural :static)]))

(play GIANT_STEPS
      (dupt 2)
      vel3
      (chans
       [(patch :acoustic-bass) o2- ($ t-round)]
       [(patch :electric-piano-1) ($ (par s0 s1 s2 s3))]
       [(patch :ocarina)
        vel5
        ($ (parts {:degree :II} (struct [0 3 4 6])
                  {:degree :V} (struct [1 2 5 6])
                  {:degree :I} (struct :tetrad)))
        (h/grid-zipped
         (tupn 32 [(one-of o1 o2)
                   (! (rup (rand-nth [5 6 7]) s1))
                   (tup (maybe shuffle-line)
                        [(maybe rev) (one-of s1 s2 s2- s1-)])]))])
      m/connect-repetitions
      (adjust 32))
#+end_src



#+RESULTS:
#+begin_src clojure
{:source-file "generated/history/1721641703316.noon",
 :seed-file "generated/history/1721641703316.seed",
 :midi-file "generated/history/1721641703316.mid"}

#+end_src
