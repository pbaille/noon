* Noon examples

#+begin_src clojure
(ns noon.doc.examples
  (:use noon.score)
  (:require [noon.lib.melody :as m]
            [noon.lib.harmony :as h]
            [noon.lib.rythmn :as r]
            [noon.harmony :as nh]
            [noon.utils.multi-val :as mv]
            [noon.utils.misc :as u]
            [noon.utils.pseudo-random :as pr]
            [noon.constants :as nc]
            [noon.midi :as midi]
            [clojure.math.combinatorics :as comb]))
#+end_src

Let's use the chorium soundfont:

#+begin_src clojure :pp
(swap! options* assoc :tracks {0 :chorium})
#+end_src

** Tunes
*** Autumn leaves

Simple experiment on the first part of autumn leavs grid:

#+begin_src clojure :pp
(play {:title "Autumn Leaves"}

      vel3
      [tetrad
       (lin II V I IV VII [III phrygian3] [VI (lin [melodic-minor sixth] phrygian3)])
       (h/align-contexts :s)
       (dup 2)]

      (h/grid-zipped
       (nlin 16 (chans [(patch :acoustic-bass)
                        o1- t-round]

                       [(patch :vibraphone)
                        (par s0 s1 s2 s3)]

                       [(patch :electric-piano-1) vel2
                        o2 (par s0 s2 s4) (shuftup s0 s2)]

                       [(patch :whistle) o1 vel5
                        (each [(shuftup s0 s1 s2 s3)
                            (tup same (one-of s1 s1- s2 s2-))])]))))
#+end_src

*** Giant steps (John Coltrane)

An experiment using Giant steps harmony.

Ocarina runs over simplistic bass and piano comping.

#+begin_src clojure :pp

(def GIANT_STEPS
  (let [II [II {:degree :II}]
        V [V {:degree :V}]
        I [I {:degree :I}]
        t1 same
        t2 (transpose c4-)
        t3 (transpose c4)
        s1 (lin [t1 I] [t2 (lin V I)] [t3 (lin V [dur2 I])] [t2 (lin II V)])
        II-V-I (lin II V [I dur2])]
    [tetrad
     (tup s1
          [t2 s1]
          [t3 I dur2] [t2 II-V-I] II-V-I [t3 II-V-I] [t1 (lin II V)])
     (h/align-contexts :structural :static)]))

(play vel3
      (h/harmonic-zip
       [GIANT_STEPS (dupt 2)]
       (chans
        [(patch :acoustic-bass) o2- (each t-round)]
        [(patch :electric-piano-1) (each (par s0 s1 s2 s3))]
        [(patch :ocarina)
         vel5
         (each (parts {:degree :II} (structure [0 3 4 6])
                   {:degree :V} (structure [1 2 5 6])
                   {:degree :I} (structure :tetrad)))
         (ntup 32 [(one-of o1 o2)
                   (! (rup (pr/rand-nth [5 6 7]) s1))
                   (tup (maybe (m/permutation 1/4))
                        [(maybe rev) (one-of s1 s2 s2- s1-)])])]))
      m/connect-repetitions
      (adjust 32))
#+end_src

*** ESP (Wayne Shorter)

Two utility functions:

#+begin_src clojure
(defn fill
  [resolution f]
  (sf_ (let [sdur (score-duration _)
             n (quot sdur resolution)]
         (assert (zero? (rem sdur resolution))
                 "fill: resolution should be a multiple of score length ")
         (update-score _ (ntup n f)))))

(defn fill> [resolution f]
  (sf_ (let [sdur (score-duration _)
             n (quot sdur resolution)]
         (assert (zero? (rem sdur resolution))
                 "fill: resolution should be a multiple of score length ")
         (update-score _ (ntup> n f)))))
#+end_src

first try:

#+begin_src clojure
(play

  {:title "ESP"
   :composer "Wayne Shorter"}

  (h/harmonic-zip
   ;; grid
   [tetrad
    (tup [VII superlocrian dur2] [I lydian dur2]
         [VII superlocrian dur2] [VIIb lydian dur2]
         [VI superlocrian] [VIIb lydian] [VII superlocrian] (tup [I lydian] [VIIb lydianb7])
         [VI dorian] [II lydianb7] [II dorian] [IIb lydianb7])
    (h/align-contexts :s)
    (dupt 2)]

   ;; parts
   [vel4
    (chans [(patch :acoustic-bass) o2-
            t-round]

           [(patch :electric-piano-1) vel3 o1-
            (par> d0 d3 d3 d3 d3)]

           [(patch :flute) vel6
            (fill> (/ 1 (* 2 32 6)) (any-that (within-pitch-bounds? :C0 :C3) d4- d3- d1- d1 d3 d4))])])

  ;; repeat
  (adjust 32)
  (dup 2))
#+end_src

full grid:

#+begin_src clojure
(def ESP_fullgrid
  (let [common (lin [VII superlocrian dur2] [I lydian dur2]
                    [VII superlocrian dur2] [VIIb lydian dur2]
                    [VI superlocrian] [VIIb lydian] [VII superlocrian] (tup [I lydian] [VIIb lydianb7]))]
    (tup common
         (lin [VI dorian] [II lydianb7] [II dorian] [IIb lydianb7])
         common
         (lin [VIb lydianb7] [II dorian] (tup [VIb dorian] [IIb lydianb7]) I))))

(play
  (h/harmonic-zip
   [ESP_fullgrid
    (dupt 2)
    (h/align-contexts :s)]

   (chans

    [(patch :electric-piano-1) o1- vel3
     (voices> d0 d3 d3 d3 d3)]

    [(patch :acoustic-bass) vel2 C-2 t-round]

    [(patch :flute)
     (fill> (/ 1 (* 6 64))
            (maybe
             (any-that* (within-pitch-bounds? :G-1 :C2)
                        [d4- d3- d1- d1 d3 d4])))
     (each (probs {void 1
                same 5}))
     m/connect-repetitions
     (vel-humanize 10 [30 70])]))

  (adjust 48))
#+end_src

*** Cyclic episode (Sam Rivers)
One more shredding experiment

#+begin_src clojure :pp
(def CYCLIC_EPISODE
  (let [a1 [dorian (rep 4 (transpose c3))]
        a2 [dorian (rep 4 (transpose c3-))]
        b (lin [IV dorian] [V superlocrian (structure [2 3 5 6])])
        c (lin [V mixolydian sus47] [V phrygian sus27])
        d [dorian (append (transpose c3))]]
    [tetrad
     (tup [(root :Bb) a1]
          [(root :G) b] [(root :D) b]
          [(root :D) a2]
          [(root :G) c] [(root :Eb) d])
     (dupt 4)
     (h/align-contexts :s :static)]))

(let [n-bars (* 4 16)

      bass [(patch :acoustic-bass) (each t2-)]
      vibe [(patch :vibraphone) vel5 t1 (each (par s0 s1 s2 s3)) h/voice-led]

      ;; alternate leads

      lead1 (ntup> (* n-bars 12)
                   (any-that (within-pitch-bounds? :C0 :C3)
                             d1 d1- d3 d3- d4 d4-))

      lead2 [(repeat-while (within-time-bounds? 0 (* n-bars 10))
               (append [start-from-last
                        (any-that (within-pitch-bounds? :C-1 :C2)
                                  (rep 3 d3 :skip-first)
                                  (rep 3 d3- :skip-first)
                                  d1 d1-)]))
             (adjust 1)]

      lead4 [(tup (mixtup s0 s1 s2 s3)
                  (mixtup s2 s3 s4 s5))
             (rup n-bars
                  (probs {(m/permutation [0 1/2]) 2
                          (m/rotation :rand) 3
                          rev 1
                          (any-that* (within-pitch-bounds? :C0 :C3)
                                     (map s-step (range -2 3))) 5}))]]

  (play CYCLIC_EPISODE
        (chans bass
               vibe
               [(h/grid-zipped lead4)
                (chans [(patch :flute) vel8 s2]
                       [(patch :electric-piano-1) vel5])
                (each (probs {vel0 1
                           same 2}))])
        (vel-humanize 0.15)
        (adjust 64)))
#+end_src

*** Inner urge (Joe Henderson)


#+begin_src clojure
(defn last-n-positions
           "Limit the score to the n latest positions found."
           [n]
           (sf_ (let [_ (->> (group-by :position _)
                             seq (sort-by key)
                             reverse (take n)
                             (map second) (reduce into #{}))]
                  (update-score _ (start-from (score-origin _))))))

(let [n-bars 24
      choir [(patch :choir-aahs) vel5 (par> d3 d3 d3)]
      bass [(patch :acoustic-bass) C-2 t-round]
      lead-line (any-that (within-pitch-bounds? :C0 :C3)
                          (rep 2 d3 :skip-first)
                          (rep 2 d3- :skip-first)
                          d4 d4-
                          d1 d1-
                          (rep 3 d2 :skip-first)
                          (rep 3 d2- :skip-first))]
  (play (h/harmonic-zip
         [(tup (lin (nlin 4 [(root :F#) locrian2])
                    (nlin 4 [(root :F) lydian])
                    (nlin 4 [(root :Eb) lydian])
                    (nlin 4 [(root :Db) lydian]))
               [lydian
                (lin* (map root [:E :Db :D :B :C :A :Bb :G]))])
          (h/align-contexts :s)
          (dupt 4)]
         (tup (chans choir
                     bass
                     [(patch :music-box)
                      vel5 C1
                      (m/simple-tupline (* n-bars 10) lead-line)])
              (chans choir
                     bass
                     [(patch :ocarina)
                      vel4 C1
                      (m/simple-tupline (* n-bars 24) lead-line)])
              (chans choir
                     bass
                     [(patch :sawtooth)
                      (dur (/ 1 n-bars))
                      vel4 C1
                      (tup d0 d3 d6)
                      (tup d0 d4 d8)
                      (m/line (one-of (last-n-positions 10) (last-n-positions 7))
                              (any-that (within-pitch-bounds? :C0 :C3)
                                        (m/permutation {:grade 3})
                                        #_(one-of (m/contour :rotation {:layer :d})
                                                  (m/contour :mirror {:layer :d})
                                                  (m/contour :similar {:delta 0 :layer :d}))
                                        (one-of d1 d1-)
                                        (one-of d2 d2-))
                              (sf_ (> (score-duration _) 1))
                              (trim 0 1))
                      (vel-humanize 5 [40 80])])
              (chans [choir
                      (ntup (/ n-bars 2) same)
                      ($by :position [(! (one-of (r/gen-tup 8 3 :euclidean)
                                                 (r/gen-tup 8 3 :durations [2 3 4 5])))
                                      (sf_ (let [xs (-> (group-by :position _) seq sort vals)]
                                             (reduce into #{} (map update-score xs (pr/shuffle [d0 d1 d1-])))))])]
                     bass)))
        (adjust 180)))

#+end_src

** Harmonic sequences
*** simple I IV VII I

Experimenting passing notes:

#+begin_src clojure :pp
(play dur2
      (scale :harmonic-minor)
      (lin I IV VII I)
      (h/align-contexts :s)

      (lin same (transpose c3) same)

      (chans

       [(patch :choir-aahs) vel4
        (each [(par s0 s1 s2)
            (maybe (tup s0 s1-) (tup s0 s1))])]

       [(patch :ocarina) vel6
        (each [(shuftup s0 s1 s2)
            (each (one-of (tup s0 (shuflin (one-of c1- s-) s+) s0)
                       (tup s0 c1- s0 (one-of s2- s2))))])]

       [(patch :kalimba) vel4 o2
        (each [(shuftup s0 s1 s2)
            (each (one-of vel0 (par s0 s2-) (shuftup s0 s1 s2)))])]

       [(patch :acoustic-bass) vel3
        o2-]))
#+end_src

*** simple I IV I V

#+begin_src clojure :pp
(play dur2
      ;; grid
      (lin I IV I V)
      (h/align-contexts :s)
      ;; on each chord
      (each (chans
          ;; rythmn
          [(patch :woodblock) C0 (dupt 4)]
          [(patch :tinkle-bell) C0 (r/gen-tup 12 5 {:durations [1 2 3]})]
          ;; comping
          [(patch :marimba) o1- (r/gen-tup 12 5 :euclidean) (each (par s0 s2)) (each (one-of s0 s1 s1-))]
          [(patch :acoustic-bass) t2- vel10 (r/gen-tup 12 5 :euclidean :shifted)]
          ;; ornementation
          [vel12 (patch :music-box) o1
           (one-of s0 s1 s1-)
           (shuftup s0 s1 s3)
           (each (probs {[(par s0 s2) (maybe (tup s0 s1))] 3
                      [(tup s3 s1 (par s2 s0) s1-)] 2
                      [(tup d1- s0 d1 s0) (maybe (m/rotation 2))] 1}))]))
      ;; repeat one time
      (dup 2))
#+end_src

*** epic lydian

#+begin_src clojure :pp
(def s? (one-of s2- s1- s1 s2))

(play {:description "epic lydian sequence by minor thirds"}

      (h/harmonic-zip
       [lydian sus47
        (tup* (map root [:C :Eb :F# :A]))
        (dupt 2)
        (h/align-contexts :s)]

       (par [(chan 1) (patch :choir-aahs) vel3
             (ntup 8 (par s0 s1 s2))]

            [vel4
             (m/simple-tupline (* 16 16)
                               (any-that (within-pitch-bounds? :C-1 :C2)
                                         (lin s? s?)
                                         [(shuflin s1 s2 s3 s4) (maybe rev)]
                                         (lin d1 d1- s0 s?)
                                         (lin d1- d1 s0 s?)))

             (par [(chan 2) (patch :french-horn)]
                  [(chan 3) vel5 o2 (patch :flute)])]

            [(chan 4) (patch :taiko-drum)
             vel2 (ntup 16 (lin dur3 [o1 vel4 dur2] dur3))]

            [(chan 5) (patch :acoustic-bass)
             o2- (ntup 32 t0)]))

      #_(sub {:channel 5} (each tonic-round))

      (adjust 32)
      (nlin 4 (s-shift -1)))
#+end_src

*** Tritonal experiment

A rich harmonic sequence using V I progressions over tritonal modulation cycle (like Giant step).

#+begin_src clojure :pp
(play {:description "tritonal chord sequence shifts by minor thirds"}

      (let [I (one-of [lydian+ (structure [2 3 4 5 6])] [melodic-minor (structure [1 2 4 5 6])])
            V (one-of [V mixolydian (structure [1 3 4 5 6])] [V phrygian6 (structure [0 1 3 5 6])])
            [B G Eb] (map root [:B :G :Eb])]

        [(tup [B V] [B I] [G V] [G I] [Eb V dur2] [Eb I dur2])
         (rup 4 (transpose d2-))
         (h/align-contexts :s :static)

         (chans

          [(patch :choir-aahs)
           vel3
           (each (par s0 s1 s2 s3 s4))]

          [(patch :vibraphone)
           vel5
           (each (probs {(par s0 s1 s2 s3 s4) 1
                      (shuftup [dur2 (par s0 s2 s4)] [(one-of dur2 dur3) (par s1- s1 s3)]) 3}))]

          [(patch :acoustic-bass)
           vel5
           (each [tetrad o2- t0 (maybe (tup (one-of dur2 dur3) [dur2 o1-]))])]

          [(patch :taiko-drum)
           vel3
           (each (shuftup s0 s1 s2 s3 s4))
           (each (probs {vel0 3 same 1 (one-of o1 o1-) 1 (tup t0 t1) 1}))]

          [vel6
           (h/grid-zipped
            [(chans (patch :flute) [o1 (patch :piccolo)])
             (ntup> (* 32 10)
                    (any-that (within-pitch-bounds? :C-2 :C2)
                              s1 s2 s1- s2- s3 s3-))]
            (each (probs {vel0 1
                       same 4
                       (superpose (one-of s1 s2 s3)) 0})))])

         (adjust 48)]))


#+end_src
*** Elliot smith chords

#+begin_src clojure
(play dur2
      (lin [VI seventh]
           [IV add2]
           [I]
           [III seventh (inversion 2)]
           [VI seventh]
           [IV add2]
           (tup I [III seventh phrygian3])
           [IV])
      (h/align-contexts :d)
      (each (chans [(patch :acoustic-bass) o1- t-round]
                   h/simple-chord)))
#+end_src


#+begin_src clojure
(play (chans [(patch :electric-piano-1) (tup (shuftup s0 s1 s2 s3) (shuftup s2 s3 s4 s5))]
             [(patch :acoustic-bass) o1- t-round])
      (dupt 8)
      (h/grid
       [(tup [VI seventh]
             [IV add2]
             [I]
             [III seventh (inversion 2)]
             [VI seventh]
             [IV add2]
             (tup I [III seventh phrygian3])
             [IV])
        (h/align-contexts :d)])
      (adjust 8)
      (dup 2))
#+end_src

*** Minor progression

#+begin_src clojure
(play (lin [I melodic-minor] [V phrygian3] [V phrygian3] [I melodic-minor]
           [I phrygian3] [IV dorian] [II locrian] [IIb lydianb7])
      (dup 2)
      (lin {:section :a}
           [{:section :b} (transpose c6)])
      (h/align-contexts :d)
      (parts {:section :a} (each (chans [(patch :vibraphone) (shuftup s0 s1 s2 s3 s4 s5)]
                                        [(patch :flute) o1 (shuftup s0 s1 s2 s3 s4 s5)]
                                        [(patch :acoustic-bass) o1- t-round]))
             {:section :b} (each (chans [(patch :choir-aahs) vel4 (par s0 s1 s2)]
                                        [(patch :ocarina) vel4 s2- (shuftup s0 s2 s4)]
                                        [(patch :music-box) vel6 o1 (shuftup s0 s1 s2 s3 s4 s5 s6 s7 s8)]
                                        [(patch :acoustic-bass) o1- t-round])))
      (dup 2))
#+end_src

*** I V

#+begin_src clojure
(play dur3
      (lin [I (scale :melm) (structure :tetrad)]
           [V (scale :alt) (structure :sus47)])
      (append s1-)
      (append [(transpose c4-)
               (parts (scale :melm) (scale :lydian)
                      (scale :alt) [(scale :mixolydianb2) (structure [1 5 9 10])])])
      (dup 2)
      (h/align-contexts :s)
      (let [below (one-of d1- s1-)
            above (one-of d1 s1)
            contours [[0 -1 1 0]
                      [0 1 -1 0]
                      [-1 0 1 0]
                      [1 0 -1 0]
                      [1 0 -1 0]
                      [-1 0 1 0]]
            passings (mapv (partial mapv {0 _ -1 below 1 above}) contours)
            rand-passing (one-of* (map tup* passings))
            below-step (one-of d1- d3- d4-)
            above-step (one-of d1 d3 d4)
            rand-line (rup 4 (one-of below-step above-step))
            rand-vel (fn [min max] {:velocity (fn [_] (+ min (rand-int (- max min))))})]
        (each (chans [(patch :choir-aahs) vel4 (par s0 s1 s2 s3)
                      (h/drop 1)]
                     [(patch :acoustic-bass) t-round o1-]
                     [(shuftup s0 s1 s2 s3)
                      (each (one-of rand-passing rand-line))
                      (chans [(patch :vibraphone) (each (rand-vel 40 70)) (each (maybe vel0))]
                             [(patch :flute)
                              (each (rand-vel 60 80))
                              o1
                              (each (maybe vel0 [(chan inc) (patch :glockenspiel) vel4]))])]))))
#+end_src

** Concepts and techniques
Some attempts to implement or illustrate various musical ideas using noon.
*** Barry Harris

#+begin_src clojure
(def barry-harris (scale [0 2 4 5 7 8 9 11]))
#+end_src


#+begin_src clojure
(play barry-harris
      (tup d0 d3 d4 d7)
      (tup d0 d2)
      (rep 4 d1))
#+end_src


#+begin_src clojure
(let [chord-tones [d0 d2 d4 d7]]
  (play barry-harris
        (lin d0 d3)
        (rep 8 (one-of d1- d1))
        (each [(chans [(patch :pad-1-new-age) o1- vel3 (par* chord-tones)]
                      [(patch :ocarina) vel4 (shuftup* chord-tones) (each (maybe (tup (one-of d1 d1-) d0)))]
                      [(patch :vibraphone) vel5 o1 (ntup 6 [(one-of* chord-tones) (maybe o1) (maybe (tup d1- d0))])])
               (maybe rev)])))
#+end_src


#+begin_src clojure
(def barry-harris2 [barry-harris (structure [0 2 4 7])])
#+end_src


#+begin_src clojure
(play barry-harris2
      (lin I VI VII IV)
      (h/align-contexts :d)
      (each (chans [(patch :brass) (par s0 s1 s2 s3)]
                   [(patch :acoustic-bass) o1- t-round]
                   [(patch :ethnic) o1 (shuftup s0 s1 s2 s3 s4 s5 s6)]))
      (rep 2 s1)
      (append (transpose c3)))
#+end_src


#+begin_src clojure
(play barry-harris2
      (lin IV I)
      (h/align-contexts :d)
      (each (par s0 s1 s2 s3))
      (rep 4 (transpose c3))
      h/voice-led)
#+end_src
*** Symetric modes

#+begin_src clojure
(def symetric-modes {:half-whole (scale [0 1 3 4 6 7 9 10])
                     :whole-half (scale [0 2 3 5 6 8 9 11])
                     :whole (scale [0 2 4 6 8 10])
                     :augm-half (scale [0 3 4 7 8 11])
                     :half-augm (scale [0 1 4 5 8 9])
                     :messian3 (scale [0 2 3 4 6 7 8 10 11])
                     :messian4 (scale [0 1 2 5 6 7 8 11])
                     :messian5 (scale [0 1 5 6 7 11])
                     :messian6 (scale [0 2 4 5 6 8 10 11])
                     :messian7 (scale [0 1 2 3 5 6 7 8 9 11])})
#+end_src


#+begin_src clojure
(play (symetric-modes :augm-half)
      (:two {:one (rup 8 (one-of d1 d1- d2 d2- d3 d3-))
             :two (shuftup d1 d2 d3 d4 d5 d6 d7)})

      (patch :electric-piano-1)
      (rep 32 (one-of (each d3)
                      (each d3-)
                      (m/rotation 1/2)
                      (m/permutation :rand {:grade 2})
                      (m/contour :similar {:delta 0 :layer :d}))))
#+end_src


#+begin_src clojure
(defn rand-structure [size]
  (ef_ (let [degree-count (-> _ :pitch :scale count)
             degrees (first (mv/consume size (mv/mix* (range degree-count))))]
         (update-score #{_} (structure (vec (sort degrees)))))))
#+end_src


#+begin_src clojure
(def rand-degree
  (ef_ (let [scale-size (-> _ :pitch :scale count)
             deg (rand-nth (range 1 scale-size))]
         (update-score #{_} (degree (rand-nth [(- deg) deg]))))))
#+end_src


#+begin_src clojure
(defn rand-tup [size]
  (ef_ (let [degree-count (-> _ :pitch :scale count)
             degrees (first (mv/consume size (mv/mix* (range degree-count))))]
         (update-score #{_} (tup* (mapv d-step degrees))))))
#+end_src


#+begin_src clojure
(play (symetric-modes :half-whole)
      (rand-structure 3)
      (rep 3 rand-degree)
      (each (chans [vel4 h/simple-chord]
                   [(patch :music-box) o1 (rand-tup 7) (each (one-of vel0 vel4 vel6 vel7))]))
      (append [rev s2])
      (append (transpose c5))
      (append (between 0 1/3)))
#+end_src

*** Arvo part

#+begin_src clojure
(let [m-line (fn [size]
               (pr/rand-nth (vals {:up-to [(rep size d1-) rev]
                                   :up-from (rep size d1)
                                   :down-to [(rep size d1) rev]
                                   :down-from (rep size d1-)})))
      base (pr/shuffle (map vector
                            [s0 s1 s2 (one-of s0 s1 s2)]
                            (map m-line (pr/shuffle (pr/rand-nth (u/sums 12 4 [2 3 4 5]))))))]
  (play lydianb7
        (lin* base)
        (each (chans [(patch :piccolo) vel6 o1]
                     [(patch :flute) vel3 o1 d5-]
                     [(patch :accordion) vel4 d0]
                     [(patch :choir-aahs) s-floor (vel-humanize 7 [40 80])]
                     [(patch :choir-aahs) s-floor o1 s1 (vel-humanize 7 [40 80])]
                     [(patch :acoustic-bass) C-2 t-floor]))

        m/connect-repetitions
        (append [rev (transpose c3-)])
        (append dorian)
        (dup 2)))

#+end_src

** snippets
*** textures 1

Trying to produce vibrating textures by playing very fast note sequences.

#+begin_src clojure :pp
(play dur2
      lydian
      (patch :flute)
      (chans _ d3 d6 d9)
      (each [(dupt 24) (each (one-of vel1 vel3 vel6)
                       (probs {_ 6 d1 1}))])
      ($by :channel (maybe rev))
      (append (transpose c3-))
      (append (transpose c1-)))
#+end_src


#+begin_src clojure :pp
(play dur3
      lydian
      (chans [(patch :marimba) (lin _ c1)]
             [(patch :vibraphone) (lin d3 d2)]
             [(patch :celesta) (lin d6 d6)]
             [(patch :orchestral-harp) (lin d9 d9)])
      (append (transpose c2-))
      (dup 2)

      (each [(dupt 34)
          (each (one-of vel0 vel3 vel6 vel9)
             (probs {_ 4 o1 1}))]))
#+end_src


#+begin_src clojure :pp
(play dur8
      o2
      (dupt 128)
      (each (par> d4 d4 d4)
         (one-of vel0 vel1 vel2 vel3 vel4 vel5)))
#+end_src


*** Sparkling waves

#+begin_src clojure
(play dur:4
      vel4
      (scale :lydian)
      (patch :music-box)
      (par s0 s2 s4)
      (rep 3 (each [{:mark (rand)} s1 {:velocity (div 1.1) :duration (mul 1.3)} (shuftup s2- s0 s2)])
           :skip-first)
      (lin I [rev III] [o1- V] [rev o1- VII])
      (append [rev (transpose c3)]))
#+end_src

*** infinite climb

#+begin_src clojure
(play dur6 dur2
      (patch :ocarina)
      (rup 36 c1)
      (sf_ (set (map-indexed (fn [i n] (let [vel (* 60 2 (/ (inc i) (count _)))
                                            vel (if (> vel 60) (- 60 (- vel 60)) vel)]
                                        (assoc n :velocity vel)))
                             (sort-by :position _))))
      (par _
           (m/rotation 1/3)
           (m/rotation 2/3))
      (dup 4))
#+end_src

*** violin fast arpegio

#+begin_src clojure
(play (dur 3/2)
      dorian
      (patch :violin)
      (lin I IV V I)
      (h/align-contexts :s)
      (each (ntup 2 (tup s0 s2 s4 s4 s2 s0)))
      (each (! (vel (mul (+ 0.9 (* (rand) 0.2))))))
      (append s1-))
#+end_src
*** zip rythmn

#+begin_src clojure
(play lydianb7
      (h/modal-structure 5)
      (chans
       [(patch :vibraphone)
        (shuflin s0 s1 s2 s3 s4)
        (nlin 4 (one-of s1 s2 s1- s2-))
        (sf_ (let [rythmn (mk (nlin 2 (! (r/gen-tup 12 5 :shifted))) (append rev))]
               (set (map (fn [r n]
                           (merge n (select-keys r [:position :duration])))
                         (sort-by :position rythmn)
                         (sort-by :position _)))))]
       [(patch :woodblock) (r/gen-tup 12 5 :euclidean) (dup 4)]
       [(patch :tinkle-bell) (dup 4)]
       [(patch :metallic) (shuflin s0 s1 s2 s3) (each (par s0 s1 s2))]
       [(patch :acoustic-bass) t2- (dup 4)])
      (adjust 8)
      (append [(transpose c3-) s1 rev] _))
#+end_src





** Gradual melodic transformation

Random harmonic seq using IV II and VI degrees on vibraphone, ocarina melody derives using transposition, rotation and permutation.

#+begin_src clojure :pp
(play (chans

       [(patch :vibraphone)
        vel3
        (ntup 4 [(one-of IV II VI) tetrad (par [t2- vel5] s0 s1 s2 s3)])]

       [(patch :ocarina)
        vel5
        (shuftup d1 d2 d3 d4 d5)
        (each (maybe (par d0 d3)))
        (rup 16
             (probs {(m/permutation :rand) 1
                     (m/rotation :rand) 3
                     (one-of* (map d-step (range -3 4))) 5}))])

      (adjust 10)
      (append [d2- (transpose c3)]
              [d2 (transpose c3-)]
              same))
#+end_src

** =noon.lib.rythmn/bintup=

An experiment around =noon.lib.rythmn/gen-bintup=
The =gen-bintup= function is used to produce a bass line and a fast rythmic texture alternating between electric-piano and marimba.

#+begin_src clojure
(play dur6
      (lin [I dorian]
           [III mixolydian]
           [VIb lydian]
           [I lydian])
      (append> (transpose c1-) (transpose c1-) (transpose c1-))
      (dup 2)
      (h/align-contexts)
      (each (chans [(patch :new-age) vel3  o1- (par s0 s1 s2 s3 [o1 (par> d3 d3 d3 d3)])]
                   [(patch :taiko-drum) (r/gen-tup 9 3 :durations [2 3 4]) (each (one-of vel4 vel3) (maybe d3 d3-))]
                   [(patch :acoustic-bass)
                    t-floor o1-
                    (r/gen-bintup 9 4 :euclidean :shifted)
                    vel4 (vel-humanize 1/5)
                    (parts {:bintup 0} (each (vel+ 20) (one-of s0 s1))
                           {:bintup 1} (each (probs {vel0 2 (one-of d3- d4) 1})))]
                   [(r/gen-bintup 54 11  :shifted :euclidean)
                    (parts {:bintup 0} [(patch :electric-piano-1)
                                        sus4
                                        (each vel3
                                              (vel-humanize 1/10)
                                              (one-of d2 d4 d6)
                                              (probs {_ 3 [(one-of s0 s1 s2) (par s0 s1 s2)] 1}))]
                           {:bintup 1} [(patch :marimba)
                                        vel4
                                        (vel-humanize 1/5)
                                        (chan+ 1)
                                        (each [(one-of d3 d5 d7) (maybe o1 (par _ d4))])])])))
#+end_src
