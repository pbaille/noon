#+title: Examples

* Noon examples

#+begin_src clojure
(ns noon.doc.examples
  (:use noon.score)
  (:require [noon.lib.harmony :as h]
            [noon.lib.melody :as m]
            [noon.lib.rythmn :as r]
            [noon.utils.misc :as u]
            [noon.midi :as midi]
            [clojure.math.combinatorics :as comb]))
#+end_src

Let's use the chorium soundfont:

#+begin_src clojure :pp
(swap! options* assoc :tracks {0 :chorium})
#+end_src

#+RESULTS:
#+begin_src clojure
{:bpm 60, :tracks {0 :chorium}}

#+end_src

** simple I IV I V

#+begin_src clojure :pp
(play dur2
      ;; grid
      (cat I IV I V)
      (h/align-contexts :s)
      ;; on each chord
      ($ (chans
          ;; rythmn
          [(patch :woodblock) C0 (dupt 4)]
          [(patch :tinkle-bell) C0 (r/gen-tup 12 5 {:durations [1 2 3]})]
          ;; comping
          [(patch :marimba) o1- (r/gen-tup 12 5 :euclidean) ($ (par s0 s2)) ($ (one-of s0 s1 s1-))]
          [(patch :acoustic-bass) t2- vel10 (r/gen-tup 12 5 :euclidean :shifted)]
          ;; ornementation
          [vel12 (patch :music-box) o1
           (one-of s0 s1 s1-)
           (shuftup s0 s1 s3)
           ($ (probs {[(par s0 s2) (maybe (tup s0 s1))] 3
                      [(tup s3 s1 (par s2 s0) s1-)] 2
                      [(tup d1- s0 d1 s0) (maybe (m/rotation 2))] 1}))]))
      ;; repeat one time
      (dup 2))
#+end_src

#+RESULTS:
#+begin_src clojure
{:source-file "generated/history/1721641684099.noon",
 :seed-file "generated/history/1721641684099.seed",
 :midi-file "generated/history/1721641684099.mid"}

#+end_src

** simple I IV VII I

Experimenting passing notes:

#+begin_src clojure :pp
(play dur2
      (scale :harmonic-minor)
      (cat I IV VII I)
      (h/align-contexts :s)

      (cat same (transpose c3) same)

      (chans

       [(patch :choir-aahs) vel4
        ($ [(par s0 s1 s2)
            (maybe (tup s0 s1-) (tup s0 s1))])]

       [(patch :ocarina) vel6
        ($ [(shuftup s0 s1 s2)
            ($ (one-of (tup s0 (shufcat (one-of c1- s-) s+) s0)
                       (tup s0 c1- s0 (one-of s2- s2))))])]

       [(patch :kalimba) vel4 o2
        ($ [(shuftup s0 s1 s2)
            ($ (one-of vel0 (par s0 s2-) (shuftup s0 s1 s2)))])]

       [(patch :acoustic-bass) vel3
        o2-]))
#+end_src

** Giant steps (John Coltrane)

An experiment using Giant steps harmony.

Ocarina runs over simplistic bass and piano comping.

#+begin_src clojure :pp

(def GIANT_STEPS
  (let [II [II {:degree :II}]
        V [V {:degree :V}]
        I [I {:degree :I}]
        t1 same
        t2 (transpose c4-)
        t3 (transpose c4)
        s1 (cat [t1 I] [t2 (cat V I)] [t3 (cat V [dur2 I])] [t2 (cat II V)])
        II-V-I (cat II V [I dur2])]
    [tetrad
     (tup s1
          [t2 s1]
          [t3 I dur2] [t2 II-V-I] II-V-I [t3 II-V-I] [t1 (cat II V)])
     (h/align-contexts :structural :static)]))

(play GIANT_STEPS
      (dupt 2)
      vel3
      (chans
       [(patch :acoustic-bass) o2- ($ t-round)]
       [(patch :electric-piano-1) ($ (par s0 s1 s2 s3))]
       [(patch :ocarina)
        vel5
        ($ (parts {:degree :II} (struct [0 3 4 6])
                  {:degree :V} (struct [1 2 5 6])
                  {:degree :I} (struct :tetrad)))
        (h/grid-zipped
         (tupn 32 [(one-of o1 o2)
                   (! (rup (rand-nth [5 6 7]) s1))
                   (tup (maybe shuffle-line)
                        [(maybe rev) (one-of s1 s2 s2- s1-)])]))])
      m/connect-repetitions
      (adjust 32))
#+end_src


** ESP (Wayne Shorter)

Two utility functions:

#+begin_src clojure
(defn fill
  [resolution f]
  (sf_ (let [sdur (score-duration _)
             n (quot sdur resolution)]
         (assert (zero? (rem sdur resolution))
                 "fill: resolution should be a multiple of score length ")
         (upd _ (tupn n f)))))

(defn fill> [resolution f]
  (sf_ (let [sdur (score-duration _)
             n (quot sdur resolution)]
         (assert (zero? (rem sdur resolution))
                 "fill: resolution should be a multiple of score length ")
         (upd _ (tupn> n f)))))
#+end_src

first try:

#+begin_src clojure
(play

 {:title "ESP"
  :composer "Wayne Shorter"}

 ;; grid
 tetrad
 (cat [VII superlocrian dur2] [I lydian dur2]
      [VII superlocrian dur2] [VIIb lydian dur2]
      [VI superlocrian] [VIIb lydian] [VII superlocrian] (tup [I lydian] [VIIb lydianb7])
      [VI dorian] [II lydianb7] [II dorian] [IIb lydianb7])
 (h/align-contexts :s)

 ;; parts
 vel4
 (chans [(patch :acoustic-bass) o2-
         t-round]

        [(patch :electric-piano-1) vel3 o1-
         ($ (par> d0 d3 d3 d3 d3))]

        [(patch :flute) vel6
         ($ (fill> 1/8 (one-of d4- d3- d1- d1 d3 d4)))])

 ;; repeat
 (dup 2))
#+end_src


full grid:

#+begin_src clojure
(def ESP_fullgrid
  (let [common (cat [VII superlocrian dur2] [I lydian dur2]
                    [VII superlocrian dur2] [VIIb lydian dur2]
                    [VI superlocrian] [VIIb lydian] [VII superlocrian] (tup [I lydian] [VIIb lydianb7]))]
    (tup common
         (cat [VI dorian] [II lydianb7] [II dorian] [IIb lydianb7])
         common
         (cat [VIb lydianb7] [II dorian] (tup [VIb dorian] [IIb lydianb7]) I))))

(play ESP_fullgrid
      (dupt 2)
      (h/align-contexts :s)

      (h/grid-zipped

       (chans

        [(patch :electric-piano-1) o1- vel3
         (fill (/ 1 (* 2 64)) (voices> d0 d3 d3 d3 d3))]

        [(patch :acoustic-bass) vel2 o2-
         (fill (/ 1 (* 2 64)) t-round)] ;; HERE this do not result in playing tonics

        [(patch :flute) vel6
         (fill> (/ 1 (* 6 64))
                (maybe
                 (any-that* (within-pitch-bounds? :C-1 :C2)
                            [d4- d3- d1- d1 d3 d4])))
         ($ (probs {vel0 1
                    same 5}))]))

      m/connect-repetitions

      (adjust 48))
#+end_src

** epic lydian

#+begin_src clojure :pp
(play {:description "epic lydian sequence by minor thirds"}

      [lydian sus47
       (tup* (map root [:C :Eb :F# :A]))
       (dupt 2)
       (h/align-contexts :s)]

      (h/grid-zipped

       (par [(chan 1) (patch :choir-aahs) vel3
             (tupn 8 (par s0 s1 s2))]

            [vel4
             (tupline (* 16 16)
                      (any-that (within-pitch-bounds? :C-1 :C2)
                                (cat s? s?)
                                [(shufcat s1 s2 s3 s4) (maybe rev)]
                                (cat d1 d1- s0 s?)
                                (cat d1- d1 s0 s?)))

             #_connect-repetitions
             (par [(chan 2) (patch :french-horn)]
                  [(chan 3) vel5 o2 (patch :flute)])]

            [(chan 4) (patch :taiko-drum)
             vel2 (tupn 16 (cat dur3 [o1 vel4 dur2] dur3))]

            [(chan 5) (patch :acoustic-bass)
             o2- (tupn 32 t0)]))

      #_(sub {:channel 5} ($ tonic-round))

      (adjust 32)
      (catn 4 (s-shift -1)))
#+end_src


** Tritonal experiment

A rich harmonic sequence using V I progressions over tritonal modulation cycle (like Giant step).

#+begin_src clojure :pp
(play {:description "tritonal chord sequence shifts by minor thirds"}

      (let [I (one-of [lydian+ (struct [2 3 4 5 6])] [melodic-minor (struct [1 2 4 5 6])])
            V (one-of [V mixolydian (struct [1 3 4 5 6])] [V phrygian6 (struct [0 1 3 5 6])])
            [B G Eb] (map root [:B :G :Eb])]

        [(tup [B V] [B I] [G V] [G I] [Eb V dur2] [Eb I dur2])
         (rup 4 (transpose d2-))
         (h/align-contexts :s :static)

         (chans

          [(patch :choir-aahs)
           vel3
           ($ (par s0 s1 s2 s3 s4))]

          [(patch :vibraphone)
           vel5
           ($ (probs {(par s0 s1 s2 s3 s4) 1
                      (shuftup [dur2 (par s0 s2 s4)] [(one-of dur2 dur3) (par s1- s1 s3)]) 3}))]

          [(patch :acoustic-bass)
           vel5
           ($ [tetrad o2- t0 (maybe (tup (one-of dur2 dur3) [dur2 o1-]))])]

          [(patch :taiko-drum)
           vel3
           ($ (shuftup s0 s1 s2 s3 s4))
           ($ (probs {vel0 3 same 1 (one-of o1 o1-) 1 (tup t0 t1) 1}))]

          [vel5
           (h/grid-zipped
            (chans (patch :flute) [o1 (patch :piccolo)])
            (tupn> (* 32 10)
                   (any-that (within-pitch-bounds? :C-2 :C2)
                             s1 s2 s1- s2- s3 s3-))
            ($ (probs {vel0 1
                       same 4
                       (superpose (one-of s1 s2 s3)) 0})))])

         (adjust 48)]))
#+end_src

** Autumn leaves

Simple experiment on the first part of autumn leavs grid:

#+begin_src clojure :pp
(play {:title "Autumn Leaves"}

      vel3
      [tetrad
       (cat II V I IV VII [III phrygian3] [VI (cat [melodic-minor sixth] phrygian3)])
       (h/align-contexts :s)
       (dup 2)]

      (h/grid-zipped
       (catn 16 (chans [(patch :acoustic-bass)
                        o1- t-round]

                       [(patch :vibraphone)
                        (par s0 s1 s2 s3)]

                       [(patch :electric-piano-1) vel2
                        o2 (par s0 s2 s4) (shuftup s0 s2)]

                       [(patch :whistle) o1 vel5
                        ($ [(shuftup s0 s1 s2 s3)
                            (tup same (one-of s1 s1- s2 s2-))])]))))
#+end_src


** Cyclic episode (Sam Rivers)
One more shredding experiment

#+begin_src clojure :pp
(let [a1 [dorian (rep 4 (transpose c3))]
      a2 [dorian (rep 4 (transpose c3-))]
      b (cat [IV dorian] [V superlocrian (struct [2 3 5 6])])
      c (cat [V mixolydian sus47] [V phrygian sus27])
      d [dorian (append (transpose c3))]

      grid [tetrad
            (tup [(root :Bb) a1]
                 [(root :G) b] [(root :D) b]
                 [(root :D) a2]
                 [(root :G) c] [(root :Eb) d])
            (dupt 4)
            (h/align-contexts :s :static)]

      n-bars (* 4 16)

      bass [(patch :acoustic-bass) ($ t2-)]
      vibe [(patch :vibraphone) vel6 t1 ($ (par s0 s1 s2 s3)) h/voice-led]

      ;; alternate leads

      lead1 (tupn> (* n-bars 12)
                   (any-that (within-pitch-bounds? :C0 :C3)
                             d1 d1- d3 d3- d4 d4-))

      lead2 [(while (within-time-bounds? 0 (* n-bars 10))
               (append [start-from-last
                        (any-that (within-pitch-bounds? :C-1 :C2)
                                  (rep 3 d3 :skip-first)
                                  (rep 3 d3- :skip-first)
                                  d1 d1-)]))
             (adjust 1)]

      lead4 [(shuftup d0 d1 d2 d3 d4 d5 d6 d7 d8)
             (rup n-bars
                  (probs {(m/permutation [0 1/2]) 2
                          (m/rotation :rand) 3
                          rev 1
                          (any-that* (within-pitch-bounds? :C0 :C3)
                                     (map d-step (range -3 4))) 5
                          }))

             ]
      ]

  (play grid
        (chans bass
               vibe
               [(h/grid-zipped lead4)
                (chans [(patch :flute) vel8 d5]
                       [(patch :electric-piano-1) vel5])
                ($ (probs {vel0 1
                           same 2}))])
        (adjust 64)))
#+end_src

#+RESULTS:
#+begin_src clojure
{:source-file "generated/history/1721646651272.noon",
 :seed-file "generated/history/1721646651272.seed",
 :midi-file "generated/history/1721646651272.mid"}

#+end_src

** Gradual melodic transformation

#+begin_src clojure :pp
(play {:description "rand harmonic seq using IV II and VI degrees on vibraphone,
                                  ocarina melody derives using transposition, rotation and permutation."}

      (chans

       [(patch :vibraphone)
        vel3
        (tupn 4 [(one-of IV II VI) tetrad (par [t2- vel5] s0 s1 s2 s3)])]

       [(patch :ocarina)
        vel5
        (shuftup d1 d2 d3 d4 d5)
        ($ (maybe (par d0 d3)))
        (rup 16
             (probs {(m/permutation :rand) 1
                     (m/rotation :rand) 3
                     (one-of* (map d-step (range -3 4))) 5}))])

      (adjust 10)
      (append [d2- (transpose c3)]
              [d2 (transpose c3-)]
              same))
#+end_src
