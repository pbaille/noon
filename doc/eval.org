* noon.eval

The =noon.eval= namespace is leveraging the great =babashka.sci= library to bring different noon parts together into a friendly user interface.
Without =noon.eval= you can achieve the same at the cost of a more verbose ns form:

#+begin_src clojure
(ns my.namespace
  (:require [noon.updates :refer :all]
            [noon.output :as out :refer [noon play]]
            [noon.events :as events :refer [ef_ efn]]
            [noon.score :as score :refer [score sf_ sfn e->s]]
            [noon.lib.harmony :as h]
            [noon.lib.melody :as m]
            [noon.lib.rythmn :as r]))
#+end_src

It also helps to support the clojurescript side of things where some restrictions are taking place.
The =:refer :all= syntax is not possible in cljs, and the =noon.updates= namespace is containing a lot of vars that you don't want to be forced to write.

The three main forms that =noon.eval= exposes (=score= , =play= , =noon=) are macros mainly for the sake of this.
Under this, the noon API consists mainly of functions dealing with data, the two main underlying forms (=noon.output/noon=, =noon.score/score=) are functions and you can do everything you want using them directly.
